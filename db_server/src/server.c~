#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <netdb.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/errno.h>
#include <arpa/inet.h>
#include <stdbool.h>

// for request lib
#include "../lib/request.h"

#define DIE(str) perror(str);exit(-1);
#define BUFSIZE 255


int main(int argc, char* argv[]) {
	int portnumber;
	struct sockaddr_in sin, pin;
	int sd;//, sd_current;
	int addrlen;
	char buf[BUFSIZE];
	
	if(argc < 2 || argc > 3) {
		fprintf(stderr, "Usage: %s -p <port>\n", argv[0]);
		exit(-1);
	}

	int i;
	for(i=0; i < argc; i++){
		if(strcmp(argv[i], "-h") == 0){
			printf("Usage: %s -p <port>\n", argv[0]);
			puts("-h print help text.");
			puts("-p listen to port number <port>.");
			exit(0);
			//puts("-d run as a daemon.\n");
			//puts("-l logfile, log to logfile. If unspecified, logging will be output to syslog.\n");
		}else if(strcmp(argv[i], "-p") == 0){
			if(argv[i+1] != NULL) portnumber = atoi(argv[i+1]);
			else{
				printf("Usage: %s -p <port>\n", argv[0]);
				exit(0);
			}
		}
	}

        /* get a file descriptor for an IPv4 socket using TCP */
	if((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
		DIE("socket");
	}

        /* zero out the sockaddr_in struct */
	memset(&sin, 0, sizeof(sin));
        /* setup the struct to inform the operating system that we would like
         * to bind the socket the the given port number on any network
         * interface using IPv4 */
	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = INADDR_ANY;
	sin.sin_port = htons(portnumber);

        /* perform bind call */
	if(bind(sd, (struct sockaddr*) &sin, sizeof(sin)) == -1) {
		DIE("bind");
	}
	listen(sd, 10);
	//shutdown(sd, SHUT_RDWR);
	addrlen = sizeof(pin);
	int pid;
	char message[255];
	bool isQuit=false;
	bool showTables=false;
	bool showSchema=false;
	int numberOfConnections=0;
	int new;
	while(1){
		// accept connection

		new = accept(sd, (struct sockaddr*) &pin, (socklen_t*) &addrlen);

		// clean the buffer, strange chars will appear in the server console otherwise.
		fflush(stdout);
		int i = 0;				
		for(i = 0; i < sizeof(buf)/sizeof(char); i++) buf[i] = '\0';				
		for(i = 0; i < sizeof(message)/sizeof(char); i++) message[i] = '\0';
		if((pid = fork()) == -1){
			close(new);
			close(sd);
			continue;
		}else if(pid > 0){
			close(new);
			continue;		
		}else if(pid == 0){			
			while(1){
				do {
				        // receive at most sizeof(buf) many bytes and store them in the buffer */
					if(recv(new, buf, sizeof(buf), 0) == -1) { 
						DIE("recv");
					}
					int x = 0;		
					for(x = 0; x < strlen(buf); x++){ // this loop checks for NL and CR in the buffer and replaces them with			
						if(buf[x] == 0xD/*13*/) buf[x] = 32; // space
						if(buf[x] == 0xA/*10*/) buf[x] = 0; // null
					}	// in order to get a nice string to process
					strcat(message, buf);

					// check if the buffer contains the different commands that will have to be executed instantly (no need for ;)
					isQuit = strcmp(buf, ".quit ") == 0  ? true : false;
					showTables = strstr(buf, ".tables ") ? true : false;
					showSchema = strstr(buf, ".schema ") ? true : false;
					int i = 0;
					for(i = 0; i < sizeof(buf)/sizeof(char); i++) buf[i] = '\0'; // clear the buffer
				}while(!strstr(message, ";") && (!isQuit) && (!showTables) && (!showSchema));
				
				char ipAddress[INET_ADDRSTRLEN];

				/* convert IP address of communication partner to string */
				inet_ntop(AF_INET, &pin.sin_addr, ipAddress, sizeof(ipAddress));
				
				if(isQuit){
					printf("Closing connection with %s:%i by request from client.\n", ipAddress, ntohs(pin.sin_port));
					numberOfConnections-=1;
					printf("clients--\n");
					shutdown(new, SHUT_RDWR); // shutdoooown
					break;	
				}
				// if the buffer contained ".tables"
				if(showTables){
					send(new, "showing all tables\n", strlen("showing all tables\n") + 1, 0);
					request_t *request;
					request = parse_request(message);
					destroy_request(request);
				}
				// if the buffer contained ".schema"
				if(showSchema){
					send(new, "showing all schemas\n", strlen("showing all schemas\n") + 1, 0);
					request_t *request;
					request = parse_request(message);
					print_request(request);
					destroy_request(request);
				}

				printf("%s:%i - %s\n", ipAddress, ntohs(pin.sin_port), message);

				request_t *request;
				request = parse_request(message);
				
				puts("\nAFTER PARSING THE REQUEST\n");
				//printf("request type:%c", request->request_type);
				printf("table name:%s\n", request->table_name);
				printf("column name:%s\n", request->columns->name);
				printf("column name:%s\n", request->columns->next->name);

				destroy_request(request);


				// clean all buffers, strange chars will appear in the server console otherwise.
				fflush(stdout);
				fflush(stdin);
				int i = 0;
				for(i = 0; i < sizeof(buf)/sizeof(char); i++) buf[i] = '\0';
				for(i = 0; i < sizeof(message)/sizeof(char); i++) message[i] = '\0';
			}
		}
	}
	/* The close for sd never happens, this should be fixed to avoid leaks or open ports etc. */ 
        /* close the file descriptors 
         * NOTE: shutdown() might be a better alternative */
	close(sd);
	exit(0);
}

