#ifndef REQUEST_H
#define REQUEST_H
#pragma GCC visibility push(default)
#include <string.h>
#include <unistd.h>
#include <fcntl.h>

#define RT_CREATE   0
#define RT_TABLES   1
#define RT_SCHEMA   2
#define RT_DROP     3
#define RT_INSERT   4
#define RT_SELECT   5
#define RT_QUIT     6
#define RT_DELETE   7
#define RT_UPDATE   8

#define DT_INT      0
#define DT_VARCHAR  1

typedef struct request_t request_t;
typedef struct column_t column_t;

struct column_t {
    /* name of the column */
    char* name;
    /* indicates the columns data type */
    char data_type;
    /* indicates if column is the PRIMARY KEY column */
    char is_primary_key;
    /* INT value for INSERT or UPDATE statement */
    int int_val;
    /* string length for VARCHAR definition */
    int char_size;
    /* VARCHAR value for INSERT or UPDATE statement */
    char* char_val;
    /* pointer to next column entry */
    column_t* next;
};

struct request_t {
    /* type of the request */
    char* request_type;
    /* name of the table this request is for */
    char* table_name;
    /* columns for which this request is for */
    column_t* columns;
    /* column which to use in the WHERE statement */
    column_t* where;
};

/*
 * Function: parse_request
 * -----------------------
 * parses database server command into request_t struct
 *
 * request_string: string containing one database command
 *
 * returns: request_t filled with the information contained in the
 *          parsed command string
 *
 * errors: returns NULL in case of error
 *         request_string is replaced with error message
 * */
request_t* parse_request(char* request_string){

int i = 0;
int j = 0;
int ctr = 0;
request_t* req = malloc(2024);

char delimit[]="\n' '";
int length = strlen(request_string); // Length of the input string
char buf[length]; // Array for the input string
char buf2[100][100]; // Array that holds word for word
for (i=0; i < length; i++) {
	buf[i] = request_string[i];
} // Put the string into an array

for (i=0; i < length; i++) {
	if(buf[i]==' ' || buf[i]=='\0' || buf[i]=='\n' || buf[i]==',' || buf[i]=='(' || buf[i]==')' || buf[i]==';') {
	buf2[ctr][j]='\0';
	ctr++;
	j=0;
	}
	else {
	buf2[ctr][j]=buf[i];
	j++;
	}
}
/*printf("%s\n", buf2[3]);
printf("%s\n", buf2[4]);
printf("%s\n", buf2[5]);
printf("%s\n", buf2[6]);
printf("%s\n", buf2[7]);
printf("%s\n", buf2[8]);
printf("%s\n", buf2[9]);
*/

req->columns->name = "hej";

/*FILE* all_tables;
FILE* table_schema;
FILE* table_content;
char* path = "..//..//";
char* filename = buf2[2];
char* extension = "_tables.txt";
char* extension2 = "_table.txt";
char* extension3 = "_contents.txt";
char fullfile[strlen(path)+strlen("all")+strlen(extension)+1];
char fullfile2[strlen(path)+strlen(filename)+strlen(extension2)+1];
char fullfile3[strlen(path)+strlen(filename)+strlen(extension3)+1];
snprintf( fullfile, sizeof( fullfile ), "%s%s%s", path, "all", extension); // File for all tables
snprintf( fullfile2, sizeof( fullfile2 ), "%s%s%s", path, filename, extension2); // File for the table schema
snprintf( fullfile3, sizeof( fullfile3 ), "%s%s%s", path, filename, extension3); // File for the contents of the table

char* token = strtok(request_string, delimit); 
int ret = strcmp(token, "CREATE"); // Check if first word is CREATE

if(ret == 0) { // Creates the file if the first with is CREATE
req->request_type = buf2[0];
req->table_name = buf2[2];

all_tables = fopen(fullfile, "a");
table_schema = fopen(fullfile2, "w");
table_content = fopen(fullfile3, "w");

fputs(buf2[2], all_tables);
fputs("\n", all_tables);
fprintf(table_schema, "%s", buf);

fclose(all_tables);
fclose(table_schema);
fclose(table_content);
}*/

return req;
};
/*
 * Function: print_request
 * -----------------------
 * prints the information contained in the provided request_t
 * */
void print_request(request_t* request){
	//printf("%s", request->request_type);
	//printf("%s", request->table_name);
};
/*
 * Function: destroy_request
 * -------------------------
 * frees all memory associated with the provided request_t
 * including the request_t itself
 * */
void destroy_request(request_t* request){
	//destroy(request);

}

#pragma GCC visibility pop
#endif
